<?php

function extractSlugFromUrl($url) {
  $exploded = array_filter(explode('/', $url));
  if (strcmp(end($exploded), 'dashboard') == 0) {
    array_pop($exploded);
  }
  return end($exploded);
}

/**
 * @file
 * Module file of the translation management test module.
 */

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_transifex_tmgmt_translator_plugin_info() {
  return array(
    'transifex' => array(
      'label' => t('Transifex translator'),
      'description' => t('Transifex Drupal connector.'),
      'plugin controller class' => 'TMGMTTransifexTranslatorPluginController',
      'ui controller class' => 'TMGMTTransifexTranslatorUIController',
      'default settings' => array(
        'api' => '',
        'tx' => '',
        'project' => '',
      ),
    ),
  );
}

/**
 * Validation callback for the plugin settings form.
 */
function tmgmt_transifex_plugin_settings_form_validate($element, &$form_state, $form) {
  $settings = $form_state['values']['settings'];
  // Only validate the API key if one was provided.
  if (empty($settings['api'])) {
    return;
  }

  /** @var TMGMTTranslator $translator */
  $translator = $form_state['tmgmt_translator'];
  // Update translator settings with form data.
  $translator->settings = $settings;
  /** @var TMGMTTransifexTranslatorPluginController $controller */
  $controller = $translator->getController();
  if ($element['#title'] == "Transifex API Token") {
    if (!$controller->getTransifexProject($translator)) {
      form_error($element, t('The "Transifex API Key" is not valid or the target transifex project does not exist.'));
    }
  }
}

/**
 * Implements hook_menu().
 */
function tmgmt_transifex_menu() {
  $items['tmgmt_transifex/webhook'] = array(
    'title' => 'Transifex webhook',
    'page callback' => 'tmgmt_transifex_validate_webhook',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Page callback; gitHub WebHook endpoint.
 */
function tmgmt_transifex_validate_webhook() {
  $translator = tmgmt_translator_load('transifex');
  watchdog('tmgmt_transifex', 'Webhook - Received webhook');
  if (!$translator->settings['secret']) {
    echo "Webhook not activated";
    watchdog('tmgmt_transifex', 'Webhook - Not active');
    return;
  }
  $tx = new TransifexApi($translator);

  $received_json = file_get_contents("php://input", TRUE);
  $webhook = drupal_json_decode($received_json, TRUE);

  if (!isset($_SERVER['HTTP_X_TX_SIGNATURE_V2']) ||
      !isset($_SERVER['HTTP_X_TX_URL']) ||
      !isset($_SERVER['HTTP_DATE'])
  ) {
    echo 'Missing headers';
    watchdog('tmgmt_transifex', 'Webhook - Missing headers');
    return;
  }

  $http_verb = 'POST';
  $webhook_sig = $_SERVER['HTTP_X_TX_SIGNATURE_V2'];
  $http_url_path = $_SERVER['HTTP_X_TX_URL'];
  $http_gmt_date = $_SERVER['HTTP_DATE'];
  $content_md5 = md5($received_json);
  $msg = join(PHP_EOL, array('POST', $http_url_path, $http_gmt_date, $content_md5));
  $sig = base64_encode(hash_hmac('sha256', $msg, $translator->settings['secret'], true));

  if ($sig == $webhook_sig) {
    tmgmt_get_translations($translator, $webhook['resource'], $webhook['language'], true);
  } else {
    echo 'Invalid webhook';
    watchdog('tmgmt_transifex', 'Webhook - Invalid');

  }
}

function tmgmt_get_translations($translator, $resource, $language, $clean) {
  $tx = new TransifexApi($translator);
  $doc = new DOMDocument();
  $content = $tx->getTranslations($resource, $language)->content;
  $doc->loadHTML($content);
  $links = array();
  $xpath = new DOMXPath($doc);
  $translations = array();
  $exploded = explode('_', $resource);
  $node_id = intval(end($exploded));

  foreach($xpath->query("//*[@class='tx_string']") as $translation) {
    $key = $translation->getAttribute('id');
    $split = explode('_', $key);
    $propCount = array_pop($split);
    $propName  = join('_', $split);
    // If the translation is not empty
    if (strlen(trim($translation->nodeValue)) != 0 ) {
      // Add translation
      $translations[$propName][$propCount]['value']['#text'] = $translation->nodeValue;
      // Mark as reviewed
      $translations[$propName][$propCount]['value']['#status'] = 2;
    }
  }

  $tx_resource = $tx->getResource($resource);
  $categories = $tx_resource->categories;
  if (!$categories) $categories = array();
  foreach ($categories as $category) {
    preg_match('/tjid:(.*)/', $category, $tjids);
    array_shift($tjids);
    watchdog('tmgmt_transifex', drupal_json_encode($tjids));
    foreach ($tjids as $tjid) {
      $job = tmgmt_job_load(intval($tjid));
      if ($job && $job->target_language == $language) {
        watchdog('tmgmt_transifex', 'Applying ' . $language . ' translations for job with id: ' . $tjid );
        foreach ($job->getItems() as $tjiid => $job_item) {
          if ($job_item->item_id == $node_id) {
            $job->addTranslatedData(array($tjiid => $translations));
          }
        }
        unset($categories[array_search($tjid, $categories)]);
      }
    }
  }
  if ($clean) {
    $tx->doRequestToProject('PUT', 'resource/' . $resource, array(
      'categories' => $categories
    ));
  }
}

function tmgmt_transifex_poll_translations($element, $second) {
  $language = $second['tmgmt_job']->target_language;
  $translator = $second['tmgmt_job']->getTranslator();
  $tx = new TransifexApi($translator);
  $project = extractSlugFromUrl($translator->settings['project']);

  foreach ($second['tmgmt_job']->getItems() as $tjiid => $job_item) {
    $target_project = $project . '_' . $job_item->item_id;
    tmgmt_get_translations($translator, $target_project, $language, false);
  }

}
