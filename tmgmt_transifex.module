<?php

/**
 * @file
 * Module file of the translation management test module.
 */

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_transifex_tmgmt_translator_plugin_info() {
  return array(
    'transifex' => array(
      'label' => t('Transifex translator'),
      'description' => t('Transifex Translator service.'),
      'plugin controller class' => 'TMGMTTransifexTranslatorPluginController',
      'ui controller class' => 'TMGMTTransifexTranslatorUIController',
      'default settings' => array(
        'api' => '',
        'tx' => '',
        'project' => '',
      ),
    ),
  );
}

/**
 * Validation callback for the plugin settings form.
 */
function tmgmt_transifex_plugin_settings_form_validate($element, &$form_state, $form) {
  $settings = $form_state['values']['settings'];
  // Only validate the API key if one was provided.
  if (empty($settings['api'])) {
    return;
  }

  /** @var TMGMTTranslator $translator */
  $translator = $form_state['tmgmt_translator'];
  // Update translator settings with form data.
  $translator->settings = $settings;
  /** @var TMGMTTransifexTranslatorPluginController $controller */
  $controller = $translator->getController();
  if (!$controller->getTransifexProject($translator)) {
    form_error($element, t('The "Transifex API Key" is not valid or the target transifex project does not exist.'));
  }
}

/**
 * Implements hook_menu().
 */
function tmgmt_transifex_menu() {
  $items['tmgmt_transifex/webhook'] = array(
    'title' => 'Transifex webhook',
    'page callback' => 'tmgmt_transifex_validate_webhook',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Page callback; GutHub WebHook endpoint.
 */
function tmgmt_transifex_validate_webhook() {
  $received_json = file_get_contents("php://input",  TRUE);
  $json = drupal_json_decode($received_json, TRUE);
  $http_verb = 'POST';
  $webhook_sig = $_SERVER['HTTP_X_TX_SIGNATURE_V2'];
  $http_url_path = $_SERVER['HTTP_X_TX_URL'];
  $http_gmt_date = $_SERVER['HTTP_HTTP_DATE'];
  $content_md5 = md5($received_json);
  $msg = join(PHP_EOL, array('POST', $http_url_path, $http_gmt_date, $content_md5));
  $sig = base64_encode(hash_hmac('sha256', $msg, '12345', true));
  if ($sig == $webhook_sig) {
    $tjid = explode('_', $json['resource']);
    $tjid = $tjid[sizeof($tjid) - 1];
    try {
      $job = tmgmt_job_load($job_id);
    }
    catch (Exception $e) {
      watchdog_exception('tmgmt_transifex', $e);
      drupal_add_http_header('Status', '500 Internal Server Error');
      print format_string('An exception was thrown during loading job @job_id. Details are available in the log. Approximate timestamp: @time', array('@job_id' => $job_id, '@time' => time()));
      return;
    }
    $translator = $job->$translator;
    echo $translator;
  } else {
    echo 'Invalid webhook';
  }
}

function github_webhook_payload() {
  $payload = &drupal_static(__FUNCTION__);
  if (NULL === $payload) {
    $payload = (isset($_POST['payload'])) ? drupal_json_decode($_POST['payload']) : array();
  }
  return $payload;
}

/**
 * Delivery callback; Convets the array to JSON and returns.
 *
 * @param array $page_callback_result
 *   The result of a page callback. The array is simply converted to JSON, which
 *   is the rendered output of the page request.
 */
function tmgmt_webhook_json_deliver(array $page_callback_result) {
  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  print drupal_json_encode($page_callback_result);
  module_invoke_all('exit');
  drupal_session_commit();
}
